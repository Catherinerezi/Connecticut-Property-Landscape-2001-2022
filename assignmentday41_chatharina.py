# -*- coding: utf-8 -*-
"""AssignmentDay41_Chatharina.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dr6l4p9229QJFHYZtiSan3oeiyoVVjOe

#Latar Belakang

Dataset berisi data historis penjualan properti dari berbagai lokasi di Connecticut, Amerika Serikat, mencakup periode panjang (2001–2022). Dataset ini memuat informasi seperti: <br>
  - Nilai penjualan (Sale Amount)
  - Nilai asesmen (Assessed Value)
  - Tanggal pencatatan (Date Recorded)
  - Kota/lokasi (Town)
  - Tipe properti (Property Type)
  - Rasio penjualan terhadap penilaian (Sales Ratio)

#Masalah yang Ingin Diselesaikan
  Bagaimana memahami tren harga dan karakteristik properti dari waktu ke waktu dan antar wilayah, serta bagaimana menyegmentasikan properti berdasarkan performa ekonominya?

#Permasalahan yang ditangani mencakup:
  - Ketimpangan harga jual antar wilayah.
  - Variasi antara nilai jual dan nilai asesmen yang bisa memengaruhi keadilan pajak dan estimasi valuasi.
  - Kebutuhan untuk membedakan properti berdasarkan frekuensi penjualan, waktu terakhir transaksi, dan nilai ekonomi, yang dianalisis menggunakan pendekatan RFM (Recency, Frequency, Monetary).

#Tujuan Bisnis
1. Menganalisis tren historis nilai jual properti (per tahun), termasuk fluktuasi musiman.
2. Membandingkan nilai pasar dan nilai asesmen untuk menilai kecocokan estimasi pajak atau valuasi.
3. Mengevaluasi distribusi properti berdasarkan lokasi dan jenis properti untuk mendukung keputusan pembangunan dan pemasaran.
4. Melakukan segmentasi properti menggunakan metode RFM, untuk mengidentifikasi kelompok properti berdasarkan:
  - Recency: Kapan terakhir kali dijual.
  - Frequency: Seberapa sering dijual.
  - Monetary: Nilai kumulatif penjualan properti tersebut.
5. Mengkomunikasikan insight secara visual melalui 5 bentuk visualisasi eksploratif sebagai berikut:

#Visualisasi EDA yang Dilakukan
Jenis Visualisasi	Tujuan
1. Bar Plot Segmen:	Bagaimana distribusi properti berdasarkan skor RFM, dan segmen mana yang paling mendominasi dalam portofolio properti saat ini?
2. Line Chart Tren Tahunan:	Bagaimana tren rata-rata harga jual properti dari tahun ke tahun, dan apakah terdapat pola yang dapat menginformasikan keputusan investasi atau pengembangan ke depan?
3. Bar Chart Distribusi per Kota: Kota mana saja yang memiliki volume transaksi properti tertinggi, dan bagaimana persebarannya menunjukkan potensi atau dinamika pasar?
4. Stacked Bar Harga Jual:	Bagaimana distribusi harga properti di kota-kota paling aktif secara transaksi, dan kota mana yang cenderung memiliki pasar properti premium atau ekonomi menengah ke bawah?
5. Heatmap Korelasi: Apakah terdapat hubungan kuat antara harga jual dengan nilai asesmen dan sales ratio, yang dapat digunakan sebagai indikator valuasi atau strategi harga properti?

#Relevansi dan Nilai Tambah
1. Investor properti: Dapat menggunakan segmentasi RFM untuk mengetahui properti yang sering diperdagangkan, bernilai tinggi, dan baru saja berpindah tangan.
2. Developer: Dapat memprioritaskan pembangunan berdasarkan lokasi dengan frekuensi tinggi dan nilai jual tinggi.
3. Pemerintah daerah: Bisa membandingkan nilai pasar vs. nilai asesmen sebagai dasar peninjauan ulang kebijakan pajak.
4. Agen properti & pemasar: Bisa menargetkan strategi penjualan berdasarkan perilaku properti dalam segmen RFM.

#Import dan membaca data
"""

from scipy.stats import norm
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MultiLabelBinarizer
from sklearn.preprocessing import MinMaxScaler
import os
import gdown
import streamlit as st

import requests
import os

file_id = "13uUN5CQ3WRjbzlhgDc1l3Vy05Tf0dEvg"
url = f"https://drive.google.com/file/d/13uUN5CQ3WRjbzlhgDcl13Vy05Tf0dEvg/view?usp=sharing={file_id}"
output_path = "data/Real_Estate_Sales_2001-2022_GL.csv"

os.makedirs("data", exist_ok=True)

if not os.path.exists(output_path):
    print("Mengunduh dataset dari Google Drive...")
    gdown.download(url, output_path, quiet=False, fuzzy=True, use_cookies=False)
else:
    print("Dataset sudah ada, skip download.")

df = pd.read_csv(output_path, sep=';', on_bad_lines='skip')

"""#Data Understanding"""

df.head()

df.describe().T

df.shape

df.info()

"""#Cek Duplikat"""

df.duplicated().sum()

"""#Cek Missing Value"""

df.isnull().sum()

missing_percentage = df.isnull().sum()/df.shape[0]*100
missing_percentage.sort_values(ascending=False)

cols_to_drop = df.columns[df.isnull().mean() > 0.2]
df = df.drop(columns=cols_to_drop)

missing_percentage = df.isnull().sum()/df.shape[0]*100
missing_percentage.sort_values(ascending=False)

# Buat kolom baru untuk menyamakan istilah transaksi
df['transaction_value'] = df['Sale Amount']

# Analisis statistik deskriptif untuk metrik utama transaksi
df[['Assessed Value', 'Sale Amount', 'transaction_value']].describe()

"""Hal ini dilakukan untuk menciptakan variabel baru yang merepresentasikan nilai transaksi dan menganalisis statistik deskriptif atas metrik-metrik utama transaksi. Singkatnya manfaatnya adalah untuk Mengetahui berapa nilai transaksi yang sebenarnya dilakukan, bukan hanya jumlah barang atau harga unit. Dari sini kita bisa ambil rata-rata pembelian per transaksi, variasi harga produk, transaksi maksimum/minimum.

Cek Outlier kolom numerik
"""

numeric_cols = df.select_dtypes(include=np.number).columns
numeric_cols = df.select_dtypes(include="number").columns
rows = []

for col in numeric_cols:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    lower = Q1 - 1.5 * IQR
    upper = Q3 + 1.5 * IQR

    outliers = df[(df[col] < lower) | (df[col] > upper)]
    outlier_count = len(outliers)
    outlier_percentage = (outlier_count / len(df)) * 100

    rows.append("Kolom": col, "Jumlah Outlier": outlier_count, "% Outlier": f"{outlier_percentage:.2f}%")

outlier_df = pd.DataFrame(rows).sort_values("% Outlier", ascending=False)
st.dataframe(outlier_df, use_container_width=True)

"""Untuk Outlier akan dibiarkan untuk kebutuhan analisis.

Selanjutnya karena tidak ada missing values dan data terduplikat, maka kita akan pastikan abhwa di dalam data tidak ada multilabels
"""

# Isi NaN dengan string kosong agar tidak error saat pencarian teks
df_safe = df.fillna("")

# Gabungkan seluruh kolom jadi satu string per baris (lebih cepat)
row_strings = df_safe.astype(str).agg(' '.join, axis=1)

# Cari baris yang mengandung kata kunci yang mirip dengan nama kolom
pattern = r"(serial number|list year|date recorded|sale amount|address|assessed value|sales ratio)"
suspect_mask = row_strings.str.contains(pattern, case=False, regex=True)

# Tampilkan baris mencurigakan
suspect_rows = df[suspect_mask]
st.write("Baris yang mencurigakan sebagai header duplikat atau tabel bertumpuk:")
if suspect_rows.empty:
    st.success("Tidak ditemukan baris mencurigakan.")
else:
    st.dataframe(suspect_rows, use_container_width=True)

"""#Feature Engineering"""

# Hapus baris mencurigakan dari dataset utama
df_cleaned = df[~suspect_mask].copy()
df_cleaned.reset_index(drop=True, inplace=True)
st.write("Jumlah baris setelah pembersihan:", df_cleaned.shape[0])

st.write("Jumlah baris awal:", df.shape[0])
st.write("Jumlah baris setelah penghapusan:", df_cleaned.shape[0])
st.write("Jumlah baris yang dihapus:", df.shape[0] - df_cleaned.shape[0])

row_strings_cleaned = df_cleaned.fillna("").astype(str).agg(' '.join, axis=1)
st.write("Masih ada 'multi addresses'? ->", row_strings_cleaned.str.contains("multi addresses", case=False).any())
st.write("Masih ada 'serial number'? ->", row_strings_cleaned.str.contains("serial number", case=False).any())

df = df[~suspect_mask].reset_index(drop=True)

# Hapus semua baris yang memiliki missing value di kolom manapun
df_clean = df.dropna()

# Konversi kolom tanggal ke tipe datetime
df[["Date Recorded"]] = df[["Date Recorded"]].apply(pd.to_datetime, errors='coerce')

# Buat kolom baru dengan format Tahun
df["Year"] = pd.to_datetime(df["Date Recorded"], errors='coerce').dt.year

# Salin data awal lengkap tanpa kehilangan kolom apa pun
realestate_summary = df.copy()

#Buat kolom recency
realestate_summary['Date Recorded'] = pd.to_datetime(realestate_summary['Date Recorded'])
reference_date = realestate_summary['Date Recorded'].max()
realestate_summary['Data Recorded'] = (reference_date - realestate_summary['Date Recorded']).dt.days

# Agregasi per properti (berdasarkan alamat)
property_summary = df.groupby('Address').agg(
    town=('Town', 'first'),
    list_year=('List Year', 'min'),

    # Agregat total
    total_sale_amount=('Sale Amount', 'sum'),
    total_assessed_value=('Assessed Value', 'sum'),
    total_transactions=('Date Recorded', 'count'),

    # Agregat waktu
    first_recorded_date=('Date Recorded', 'min'),
    last_recorded_date=('Date Recorded', 'max'),

    # Rata-rata
    avg_sale_amount=('Sale Amount', 'mean'),
    avg_assessed_value=('Assessed Value', 'mean'),
    avg_sales_ratio=('Sales Ratio', 'mean')
).reset_index()

# Ambil kategori properti dominan per alamat
town_info = df.groupby('Address').agg(
    town=('Town', lambda x: x.mode().iloc[0] if not x.mode().empty else x.iloc[0])
).reset_index()

# Gabungkan ke ringkasan utama
property_summary = pd.merge(property_summary, town_info, on='Address', how='left')

# Kolom tambahan bulan pertama dan terakhir belanja (bentuk string)
property_summary['first_sale_month'] = property_summary['first_recorded_date'].dt.strftime('%b %Y')
property_summary['last_sale_month'] = property_summary['last_recorded_date'].dt.strftime('%b %Y')

latest_date = df['Date Recorded'].max()
property_summary['recency_days'] = (latest_date - property_summary['last_recorded_date']).dt.days

property_summary = property_summary.copy()

# Buat kategori harga properti
def categorize_price(x):
    if x < 500_000:
        return "< $500K"
    elif 500_000 <= x <= 1_000_000:
        return "$500K – $1M"
    else:
        return "> $1M"

df["Price Category"] = df["Sale Amount"].apply(categorize_price)

# Hitung jumlah properti per kategori
price_counts = df["Price Category"].value_counts()

df_group = df.copy()
df_group["Price Category"] = df_group["Sale Amount"].apply(categorize_price)
df_top = df_group[df_group["Town"].isin(df_group["Town"].value_counts().head(5).index)]

# Simpan hasil feature engineering
df_ready = df_clean.copy()

# Tampilkan hasil akhir (siap dipakai untuk analisis)
df_ready.head()

"""#Skoring RFM"""

# Skor RFM berdasarkan kuartil
property_summary["R_Score"] = pd.qcut(property_summary["recency_days"], 4, labels=[4,3,2,1]).astype(int)
property_summary["F_Score"] = pd.qcut(property_summary["total_transactions"].rank(method='first'), 4, labels=[1,2,3,4]).astype(int)
property_summary["M_Score"] = pd.qcut(property_summary["total_sale_amount"], 4, labels=[1,2,3,4]).astype(int)

# Gabungkan skor RFM
property_summary["RFM_Score"] = (
    property_summary["R_Score"].astype(str) +
    property_summary["F_Score"].astype(str) +
    property_summary["M_Score"].astype(str)
)

# Contoh segmentasi berdasarkan skor
def label_segment(row):
    if row["R_Score"] == 4 and row["F_Score"] == 4 and row["M_Score"] == 4:
        return "Best"
    elif row["F_Score"] >= 3 and row["M_Score"] >= 3:
        return "Loyal"
    elif row["R_Score"] <= 2:
        return "At Risk"
    else:
        return "Others"

property_summary["RFM_Segment"] = property_summary.apply(label_segment, axis=1)

property_summary.head()

base_metrics = df.groupby('Address').agg({
    'Serial Number': lambda x: x.mode().iloc[0] if not x.mode().empty else x.iloc[0],
    'Sale Amount': ['sum', 'mean'],
    'Assessed Value': ['sum', 'mean'],
    'Sales Ratio': 'mean',
    'transaction_value': 'sum',
    'Date Recorded': ['min', 'max'],
    'List Year': lambda x: x.mode().iloc[0] if not x.mode().empty else x.iloc[0]
}).reset_index()

# Rapikan nama kolom dari hasil multi-aggregasi
base_metrics.columns = ['Address',
    'Serial Number',
    'Sale Amount_sum', 'Sale Amount_mean',
    'Assessed Value_sum', 'Assessed Value_mean',
    'Sales Ratio_mean',
    'transaction_value_sum',
    'Date Recorded_min', 'Date Recorded_max',
    'List Year_mode'
]

property_summary = pd.merge(property_summary, base_metrics, on='Address', how='left')

property_summary.columns

# Versi ringkas untuk membandingkan 2 kolom Address dan Serial Number
df[['Address', 'Serial Number']].drop_duplicates().head()

"""#1. Bagaimana distribusi properti berdasarkan skor RFM, dan segmen mana yang paling mendominasi dalam portofolio properti saat ini?"""

fig, ax = plt.subplots(figsize=(8,5))
sns.countplot(data=property_summary, x="RFM_Segment", order=property_summary["RFM_Segment"].value_counts().index, palette="Set2")
ax.set_title("Distribusi Properti Berdasarkan Segmentasi RFM")
ax.set_xlabel("RFM Segment")
ax.set_ylabel("Jumlah Properti")
fig.tight_layout()
st.pyplot()

"""#Insight Segmentasi:
1. Best Segment
- Definisi: Properti dengan nilai transaksi tinggi (Monetary), sering berpindah tangan (Frequency), dan baru-baru ini tercatat (Recency).
- Insight:
  - Ini adalah aset premium.
  - Jumlahnya paling banyak dalam dataset.
  - Properti jenis ini biasanya sangat aktif dan likuid — menjadi tulang punggung perputaran pasar.
- Implikasi Bisnis:
  - Properti dalam segmen ini sangat layak diprioritaskan untuk promosi ulang, penawaran khusus, dan strategi investasi agresif.

2. Loyal Segment
- Definisi: Properti dengan nilai tinggi dan transaksi sering, tapi sudah lama tidak berpindah tangan.
- Insight:
  - Masih tergolong properti kuat dari sisi riwayat, tapi mungkin mulai stagnan dalam beberapa waktu terakhir.
  - Jumlahnya cukup banyak.
- Implikasi Bisnis:
  - Perlu strategi “aktivasi ulang” agar kembali aktif. Misalnya: listing ulang, renovasi, atau promosi harga khusus.

3. At Risk Segment
- Definisi: Properti yang sudah lama tidak dijual (Recency buruk), transaksi jarang, dan nilai penjualan rendah.
- Insight:
  - Ini adalah sinyal merah dalam portofolio.
  - Properti ini berisiko menjadi liabilitas (aset mati).
- Implikasi Bisnis:
  - Harus dianalisis lebih lanjut. Apakah karena lokasi buruk? Apakah jenis propertinya usang? Bisa dijual cepat, atau ditinggalkan.

4. Others Segment
- Definisi: Properti dengan skor RFM campuran yang tidak menonjol di dimensi manapun.
- Insight:
  - Ini adalah kelompok properti rata-rata, netral.
  - Jumlahnya tidak sedikit, tapi tidak terlalu dominan.
- Implikasi Bisnis:
  - Segmen ini bisa dinaikkan statusnya ke Loyal/Best dengan pendekatan yang tepat (misal: upgrade fisik, relisting, dll.)

#2. Bagaimana tren rata-rata harga jual properti dari tahun ke tahun, dan apakah terdapat pola yang dapat menginformasikan keputusan investasi atau pengembangan ke depan?
"""

fig, ax = plt.subplots(figsize=(8,5))
yearly_avg = df.groupby("Year")["Sale Amount"].mean()
sns.lineplot(x=yearly_avg.index, y=yearly_avg.values)
ax.set_title("Tren Rata-rata Harga Properti per Tahun")
ax.set_xlabel("Tahun")
ax.set_ylabel("Rata-rata Sale Amount")
ax.set_ylim(bottom=0)
fig.tight_layout()
st.pyplot()

"""#Insight Tahun-per-Tahun
1. Periode Awal (2001–2005)
- Rata-rata harga properti relatif rendah dan stabil.
- Pasar belum tumbuh signifikan — fase awal atau pra-boom.

2. Kenaikan Bertahap (2006–2008)
- Harga mulai naik, bisa jadi karena tren properti nasional atau kondisi ekonomi global sebelum krisis 2008.

3. Penurunan Tajam (2009–2010)
- Harga jatuh tajam — kemungkinan besar efek dari krisis finansial global (subprime mortgage).

4. Fase Stabil (2011–2018)
- Harga bergerak datar dan konsisten, menandakan pasar memasuki fase pemulihan atau stagnasi.

5. Kenaikan Signifikan (2019–2021)
- Terjadi lonjakan tajam — bisa jadi efek dari:
  - Lonjakan permintaan pasca-pandemi
  - Perubahan tren kepemilikan properti (orang pindah ke pinggiran, dll.)
  - Kenaikan harga material bangunan

6. Penurunan Moderat di Tahun Terakhir
- Indikasi awal adanya penyesuaian pasar atau koreksi harga setelah lonjakan sebelumnya.

#3. Kota mana saja yang memiliki volume transaksi properti tertinggi, dan bagaimana persebarannya menunjukkan potensi atau dinamika pasar?
"""

fig, ax = plt.subplots(figsize=(8,5))
top_towns = df["Town"].value_counts().head(10)
sns.barplot(x=top_towns.values, y=top_towns.index, palette="viridis")
ax.set_title("10 Kota dengan Jumlah Transaksi Tertinggi")
ax.set_xlabel("Jumlah Transaksi")
ax.set_ylabel("Kota")
fig.tight_layout()
st.pyplot()

"""#Insight Berdasarkan Visualisasi
Bar chart menampilkan 10 kota teratas berdasarkan jumlah transaksi properti. Berikut beberapa insight utama dari grafik tersebut:
1. Bridgeport – Puncak Aktivitas
    - Peringkat pertama dengan jumlah transaksi properti terbanyak.
    - Kota ini bisa dianggap sebagai pusat pasar properti paling aktif di Connecticut.
    - Potensi sebagai pasar utama untuk flipping atau pembelian massal oleh investor.

2. Stamford – Persaingan Ketat
    - Tepat di bawah Bridgeport, menunjukkan tingkat likuiditas pasar yang juga tinggi.
    - Stamford cenderung dikenal sebagai kawasan urban dengan pertumbuhan ekonomi kuat.

3. Waterbury & Norwalk – Aktivitas Konsisten
    - Termasuk kota dengan populasi besar dan infrastruktur mapan.
    - Aktivitas tinggi menunjukkan minat jangka panjang dan populasi aktif berpindah tempat.

4. Kota-kota Lain (New Haven, Hartford, Danbury, Meriden, dll.)
    - Masuk 10 besar, namun selisihnya mulai turun signifikan.
    - Masih cukup aktif, cocok untuk pengembang lokal atau agen properti regional.

#4. Stacked Bar Harga Jual
"""

pivot = df_top.pivot_table(index="Town", columns="Price Category", values="Serial Number", aggfunc="count")
fig, ax = plt.subplots(figsize=(8,5))
pivot.plot(kind="bar", stacked=True, colormap="Set2", ax=ax)
ax.set_title("Distribusi Kategori Harga Properti per Kota (Top 5)")
ax.set_ylabel("Jumlah Properti")
fig.tight_layout()
st.pyplot()

"""#Insight dari Visualisasi
1. Dominasi Segmen <$500K:
    - Semua kota didominasi oleh properti dengan harga di bawah $500.000 (warna hijau muda).
    - Menandakan pasar low–mid-end masih mendominasi kebutuhan masyarakat.
    - Cocok untuk strategi volume-based seperti penyewaan atau first-home buyers.

2. Waterbury – Hampir Eksklusif Low-End:
    - Hampir seluruh propertinya berada di bawah $500K.
    - Kota ini cocok untuk investor budget-conscious atau penyewaan massal.

3. Stamford – Porsi Properti Premium Lebih Besar:
    - Paling menonjol pada kategori $500K–$1M dan >$1M.
    - Indikasi pasar properti menengah ke atas, cocok untuk high-value investment.
    - Bisa jadi tempat pengembangan hunian premium atau kawasan elit.

4. Norwalk dan Bridgeport – Kombinasi Seimbang:
    - Memiliki ketiga kategori secara signifikan.
    - Menunjukkan beragam kelas pasar → cocok untuk developer yang ingin ekspansi ke berbagai segmen.

5. New Haven – Didominasi Low-End, tapi Ada High-End:
    - Meskipun mayoritas <$500K, terlihat juga properti >$1M.
    - Ada celah pasar properti mewah tapi lebih niche.

#5. Apakah terdapat hubungan kuat antara harga jual dengan nilai asesmen dan sales ratio, yang dapat digunakan sebagai indikator valuasi atau strategi harga properti?
"""

fig, ax = plt.subplots(figsize=(7, 3))
numeric_cols = ['Sale Amount', 'Assessed Value', 'Sales Ratio']
corr = df[numeric_cols].corr()
sns.heatmap(
    corr,
    annot=True,
    cmap='coolwarm',
    fmt=".2f",
    vmin=-1,  # Batas bawah skala korelasi
    vmax=1    # Batas atas skala korelasi
)
ax.set_title("Heatmap Korelasi antar Variabel Numerik")
fig.tight_layout()
st.pyplot()

"""#Insight dari Heatmap
1. Sale Amount vs. Assessed Value: Korelasi Lemah Positif (0.12)
  - Korelasi sangat rendah, hanya 0.12, yang mengindikasikan nilai jual tidak terlalu tergantung pada nilai asesmen.
  - Bisa berarti bahwa proses penilaian properti (assessment) tidak merepresentasikan harga pasar secara akurat.
  - Meningkatkan urgensi untuk penyesuaian kebijakan pajak berbasis nilai jual aktual, bukan sekadar asesmen.

2. Sale Amount vs. Sales Ratio: Korelasi ~ 0
  - Korelasi hampir nol, menunjukkan bahwa variabel ini tidak linear terkait.
  - Artinya, meskipun Sales Ratio secara definisi terlibat dalam Sale Amount, pengaruhnya tidak cukup kuat untuk ditangkap oleh korelasi linear biasa.

3. Assessed Value vs. Sales Ratio: Korelasi ~ 0
  - Juga menunjukkan tidak adanya hubungan linier, yang menandakan ketidakkonsistenan dalam rasio antara nilai pajak dan nilai pasar.

#Download
"""

property_summary.head()

# Simpan KESELURUHAN hasil merge
property_summary.to_csv(
    "property_summary.csv",
    index=False,
    sep='|',
    quoting=1
)

"""#Untuk Stream Lit"""

st.download_button("Download property_summary.csv",
  data=open("property_summary.csv","rb"),
  file_name="property_summary.csv",
  mime="text/csv")
